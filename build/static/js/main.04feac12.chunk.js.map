{"version":3,"sources":["Components/Login.js","Components/CreateAccount.js","App.js","serviceWorker.js","index.js"],"names":["Login","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","username","password","handleChange","bind","assertThisInitialized","handleSubmit","e","target","value","type","checked","name","setState","defineProperty","preventDefault","console","log","react_default","a","createElement","className","onSubmit","htmlFor","id","placeholder","onChange","react_router_dom","exact","to","Component","CreateAccount","email","App","activeClassName","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.04feac12.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Login extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      username: '',\r\n      password: ''\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    let target = e.target;\r\n    let value = target.type === 'checkbox' ? target.checked : target.value;\r\n    let name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    console.log('The form was sent with data:');\r\n    console.log(this.state);\r\n\r\n    // axios.post()\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"FormCenter\">\r\n        <form onSubmit={this.handleSubmit} className=\"FormFields\">\r\n          {/* Usermane */}\r\n          <div className=\"FormField\">\r\n            <label className=\"FormField__Label\" htmlFor=\"name\">Username</label>\r\n            <input type=\"text\" id=\"username\" className=\"FormField__Input\" placeholder=\"Enter Your Username\" name=\"username\"\r\n            value={this.state.username} onChange={this.handleChange} />\r\n          </div>\r\n          {/* Password */}\r\n          <div className=\"FormField\">\r\n            <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\r\n            <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter Your Password\" name=\"password\"\r\n            value={this.state.password} onChange={this.handleChange} />\r\n          </div>\r\n          {/* Login Button */}\r\n          <div className=\"FormField\">\r\n            <button className=\"FormField__Button mr-20\">Login</button>\r\n            <Link exact to=\"/\" className=\"FormField__Link\">Create an account</Link>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass CreateAccount extends Component {\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      email: ''\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(e) {\r\n    let target = e.target;\r\n    let value = target.type === 'checkbox' ? target.checked : target.value;\r\n    let name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n\r\n    console.log('The form was sent with data:');\r\n    console.log(this.state);\r\n\r\n    // axios.post()\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n      return(\r\n        <div className=\"FormCenter\">\r\n        <form className=\"FormFields\" onSubmit={this.handleSubmit}>\r\n          {/* Usermane */}\r\n          <div className=\"FormField\">\r\n            <label className=\"FormField__Label\" htmlFor=\"name\">Username</label>\r\n            <input type=\"text\" id=\"username\" className=\"FormField__Input\" placeholder=\"Enter Your Username\" name=\"username\" \r\n            value={this.state.username} onChange={this.handleChange} />\r\n          </div>\r\n          {/* Password */}\r\n          <div className=\"FormField\">\r\n            <label className=\"FormField__Label\" htmlFor=\"password\">Password</label>\r\n            <input type=\"password\" id=\"password\" className=\"FormField__Input\" placeholder=\"Enter Your Password\" name=\"password\" \r\n            value={this.state.password} onChange={this.handleChange} />\r\n          </div>\r\n          {/* Email */}\r\n          <div className=\"FormField\">\r\n            <label className=\"FormField__Label\" htmlFor=\"password\">E-mail</label>\r\n            <input type=\"email\" id=\"email\" className=\"FormField__Input\" placeholder=\"Enter Your E-mail\" name=\"email\" \r\n            value={this.state.email} onChange={this.handleChange} />\r\n          </div>\r\n          {/* Create Account Button */}\r\n          <div className=\"FormField\">\r\n            <button className=\"FormField__Button mr-20\">Create Account</button>\r\n            <Link to=\"/login\" className=\"FormField__Link\">I already have an account</Link>\r\n          </div>\r\n          \r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateAccount;","import \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, NavLink } from 'react-router-dom';\r\n\r\nimport Login from \"./Components/Login\";\r\nimport CreateAccount from \"./Components/CreateAccount\";\r\n\r\nclass App extends Component {\r\n\r\n  // here is our UI\r\n  render() {\r\n    return (\r\n      <Router>\r\n      <div className=\"App\">\r\n\r\n        <div className=\"App__Aside\">\r\n        </div>\r\n\r\n        <div className=\"App__Form\">\r\n          \r\n          <div className=\"PageSwitcher\">\r\n            <NavLink to=\"/login\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item\">Login</NavLink>\r\n            <NavLink exact to=\"/\" activeClassName=\"PageSwitcher__Item--Active\" className=\"PageSwitcher__Item\">Create Account</NavLink>\r\n          </div>\r\n\r\n          <div className=\"FormTitle\">\r\n            <NavLink to=\"/login\" activeClassName=\"FormTitle__Link--Active\" className=\"FormTitle__Link\">Login</NavLink> or \r\n            <NavLink exact to=\"/\" activeClassName=\"FormTitle__Link--Active\" className=\"FormTitle__Link\">Create Account</NavLink>\r\n          </div>\r\n        \r\n          <Route exact path=\"/\" component={CreateAccount}></Route>\r\n          <Route path=\"/login\" component={Login}></Route>\r\n        </div>\r\n      </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}